// console.log(JSON.parse(localStorage.getItem("dealsData")) || "dealsData: " + []);
// console.log(JSON.parse(localStorage.getItem("favorites")) || "Favorites: " +  []);

// Use constructor class to generate the HTML for each object in the data array. Array was generated by processing API response.
class GalleryItem {
    // Define properties for each instance.
    constructor(objectInArray) {
        this.steamAppID = objectInArray.info.steamAppID;
        this.gameID = objectInArray.info.gameID;
        this.thumb = objectInArray.info.thumb;
        this.title = objectInArray.info.title;
        this.rawgImageUrl = objectInArray.info.rawgImageUrl;
        this.metacriticLink = objectInArray.info.metacriticLink;
        this.metacriticScore = objectInArray.info.metacriticScore;
        this.steamRatingPercent = objectInArray.info.steamRatingPercent;
        this.dealRating = objectInArray.info.dealRating;
        this.dealID = objectInArray.deals[0].dealID;
        this.salePrice = objectInArray.deals[0].price;
        this.normalPrice = objectInArray.deals[0].retailPrice;
        this.savings = Math.round(parseFloat(objectInArray.deals[0].savings));
    }
    // Define generateHtml method for each instance. Allows for HTML generation using the properties created by the constructor.
    generateHtml() {
        return `
            <div class="gallery-item" data-steamid="${this.steamAppID}" data-gameid="${this.gameID}">
                <div class="image-container">
                    <img src="${this.rawgImageUrl}" alt="${this.title}">
                    <div class="overlay">
                        <div class="overlay-content">
                            <p id="game-name">${this.title}</p>
                            <a id="link1" href="https://www.metacritic.com${this.metacriticLink}">Metacritic: ${this.metacriticScore}</a>
                            <p id="steam">Steam rating: ${this.steamRatingPercent}</p>
                            <p id="deal">Deal rating: ${this.dealRating}</p>
                            <a id="link2" href="https://www.cheapshark.com/redirect?dealID=${this.dealID}">See the deal!</a>
                        </div>
                    </div>
                </div>
                <div class="item-footer">
                    <div class="game-details">
                        <div class="savings">-${this.savings}%</div>
                        <div class="prices">
                            <div class="salePrice">$${this.salePrice}</div>
                            <div class="normalPrice">$${this.normalPrice}</div>
                        </div>
                    </div>
                    <div class="heart red-heart">
                        &#9829;
                    </div>
                </div>
            </div>
        `;
    }
}

// Request options necessary to make API call.
let requestOptions = {
  method: 'GET',
  redirect: 'follow'
};

// Check if storedFavorites exists and is not null. Initialize favorites array to allow steam ID retrieval and storage. 
let storedFavorites = localStorage.getItem('favorites');
let favorites = storedFavorites && storedFavorites !== "null" ? JSON.parse(storedFavorites) : [];

let gameIDs = [];
for (let i = 0; i < favorites.length; i++) {
    gameIDs.push(favorites[i].gameID);
}

function overlay() {
    $('.gallery').on('click', '.image-container', function(event) {
        event.stopPropagation();
        $(this).find('.overlay').show();
        $(this).find('.overlay a').attr({
            'target': '_blank',
            'rel': 'noopener'
        });
    });
    $('.gallery').on('click', '.overlay', function(event) {
        event.stopPropagation();
        $(this).hide();
    });
}

// Set heart toggling. Add and remove favorites from local storage.
function setFavorites(deals) {
    $('.gallery').on('click', '.heart', function(event) {
        event.stopPropagation();
        $(this).toggleClass('red-heart');

        let gameID = $(this).closest('.gallery-item').data('gameid');
        let gameData = {};
        let gameIndex = -1;

        // Checks favorites to see if game is listed.
        for (let i = 0; i < favorites.length; i++) {
            if (favorites[i].gameID == gameID) {
                gameIndex = i;
                break;
            }
        }

        if (gameIndex === -1) {
            for (let i = 0; i < deals.length; i++) {
                if (deals[i].gameID == gameID) {
                    Object.assign(gameData, deals[i]);
                    favorites.push(gameData);
                    break;
                }
            }
        } else {
            favorites.splice(gameIndex, 1);
        }

        localStorage.setItem('favorites', JSON.stringify(favorites));
    });
}

// Check for broken links (HTML image elements).
function fixBrokenImages() {
    $('img').each(function() {
        if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
            this.src = './assets/images/missing.png';
        }
    });
}

// Display favoite games as "hearted".
function showHearts() {
    $('.gallery-item').each(function() {
        let steamID = $(this).data('steamid');
        // console.log(steamID);
        for (let i = 0; i < favorites.length; i++) {
            if (favorites[i].steamAppID == steamID) {
                $(this).find('.heart').addClass('red-heart');
                break;
            }
        }
    });
}

// Make API call. For each object in data, append the HTML generated by each instance of GalleryItem after sanitizing.
fetch("https://www.cheapshark.com/api/1.0/games?ids=" + gameIDs, requestOptions)
    .then(response => response.json())
    .then(data => {
        // console.log(data);
        let wishlistGameArr = [];
        let wishlistIndex = -1;

        // Turning the data object into an array.
        for (let i = 0; i < Object.keys(data).length; i++) {
            let wishlistGameObj = {};
            wishlistIndex = gameIDs[i];
            Object.assign(wishlistGameObj, data[wishlistIndex]);

            let favIndex = -1;
            for (let j = 0; j < favorites.length; j++) {
                if (favorites[i].gameID == wishlistIndex) {
                    favIndex = i;
                    break;
                }
            }

            if (favIndex !== -1) {
                wishlistGameObj.info.gameID = favorites[favIndex].gameID;
                wishlistGameObj.info.metacriticLink = favorites[favIndex].metacriticLink;
                wishlistGameObj.info.metacriticScore = favorites[favIndex].metacriticScore;
                wishlistGameObj.info.steamRatingPercent = favorites[favIndex].steamRatingPercent;
                wishlistGameObj.info.dealRating = favorites[favIndex].dealRating;
                wishlistGameObj.info.rawgImageUrl = favorites[favIndex].rawgImageUrl;
            }

            wishlistGameArr.push(wishlistGameObj);
        }
        // console.log(wishlistGameArr);

        wishlistGameArr.forEach(objectInArray => {
            let galleryItem = new GalleryItem(objectInArray);
            // console.log(galleryItem);
            let galleryItemHtml = galleryItem.generateHtml();
            // console.log(galleryItemHtml);
            let galleryItemHtmlClean = DOMPurify.sanitize(galleryItemHtml);
            // console.log(galleryItemHtmlClean);
            $('.gallery').append(galleryItemHtmlClean);
        });

        // Check if storedDealsData exists and is not null. Initialize dealsData array to allow steam ID retrieval and storage. (Must be called after data is fetched)
        let storedDealsData = localStorage.getItem('dealsData');
        let dealsData = storedDealsData && storedDealsData !== "null" ? JSON.parse(storedDealsData) : [];

        // Event delegation for dynamic content.
        overlay()
        setFavorites(dealsData)
        // Hearts are added to wish list items by default.
        // showHearts()
        setInterval(fixBrokenImages, 5000);
    })
    // .then(
    //     fixBrokenImages()
    // )
    .catch(error => {
        console.log('error', error);
    });